{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","mode","setMode","minutes","seconds","timeLeft","setTimeLeft","timeDisplay","setTimeDisplay","tickTimer","setTickTimer","breakTimeDisplay","setBreakTimeDisplay","sessionDisplay","setSessionDisplay","useEffect","formattedTime","formatDisplayTime","intervalId","setInterval","subtractASecond","clearInterval","console","log","document","getElementById","play","second","updateDisplayTime","timeChange","modeToUpdate","time","className","id","onClick","icon","faArrowDown","faArrowUp","faPlay","faPause","load","src","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e4757d17.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faArrowUp, faArrowDown, faPlay, faPause } from '@fortawesome/free-solid-svg-icons'\nimport logo from './logo.svg';\nimport './App.css';\n\nconst Session = 'Session';\nconst Break = 'Break'\n\nconst defaultSessionDisplay = 25;\nconst defaultBreakDisplay = 5;\nconst defaultDisplayTime = '25:00';\nconst App = () => {\n\n  const [mode, setMode] = useState('Session')\n  const [timeLeft, setTimeLeft] = useState({ minutes: defaultSessionDisplay, seconds: 0 })\n  const [timeDisplay, setTimeDisplay] = useState(defaultDisplayTime)\n  const [tickTimer, setTickTimer] = useState(false)\n\n  const [intervalId, setIntervalId] = useState(null)\n\n  const [breakTimeDisplay, setBreakTimeDisplay] = useState(defaultBreakDisplay)\n  const [sessionDisplay, setSessionDisplay] = useState(defaultSessionDisplay)\n\n  useEffect(() => {\n    //switch time left based on the mode switch \n    let minutes = mode === Session ? sessionDisplay : breakTimeDisplay\n    setTimeLeft({ minutes, seconds: 0 })\n\n    let formattedTime = formatDisplayTime(minutes, 0)\n    setTimeDisplay(formattedTime)\n  }, [mode])\n\n  const switchTimeMode = () => {\n    let nextMode = mode === Break ? Session : Break\n    setMode(nextMode)\n\n    //play audio beep\n    let audio = document.getElementById('beep')\n    audio.play()\n  }\n\n  useEffect(() => {\n    // save intervalId to clear the interval when the\n    // component re-renders\n    const intervalId = setInterval(() => {\n      if (tickTimer) {\n        subtractASecond()\n      }\n    }, 1000);\n\n    // clear interval on re-render to avoid memory leaks\n    return () => clearInterval(intervalId);\n    // add timeLeft as a dependency to re-rerun the effect\n  }, [timeLeft, tickTimer]);\n\n\n  const subtractASecond = () => {\n    let { minutes, seconds } = timeLeft; //'25', '00'\n    console.log(timeLeft, minutes, seconds)\n    if (!minutes && !seconds) {\n      // when reaching 0 switch modes\n      switchTimeMode()\n    } else {\n      console.log('sessiontimer', timeLeft) // {minutes seconds}\n\n      if (!seconds) {\n        minutes--;\n        seconds = 59;\n      } else {\n        seconds--;\n      }\n      setTimeLeft({ minutes, seconds });\n\n      let formattedTime = formatDisplayTime(minutes, seconds)\n      setTimeDisplay(formattedTime)\n    }\n  }\n\n  const formatDisplayTime = (minutes, seconds) => {\n    if (minutes < 10) {\n      minutes = `0${minutes}`\n    }\n    if (seconds < 10) {\n      seconds = `0${seconds}`\n    }\n    return `${minutes}:${seconds}`\n  }\n\n  const reset = () => {\n    console.log('resetting')\n    //set back to defaults\n    setBreakTimeDisplay(defaultBreakDisplay)\n    setSessionDisplay(defaultSessionDisplay)\n    setTimeDisplay(defaultDisplayTime)\n    setTickTimer(false)\n    setMode(Session)\n\n    let audio = document.getElementById('beep')\n    audio.load()\n  }\n\n  useEffect(() => {\n    let minutes = mode === Session ? sessionDisplay : breakTimeDisplay\n    setTimeLeft({ minutes, second: 0 })\n    let formattedTime = formatDisplayTime(minutes, 0)\n    setTimeDisplay(formattedTime)\n  }, [breakTimeDisplay, sessionDisplay]);\n\n  const updateDisplayTime = (timeChange, modeToUpdate) => {\n    let time = modeToUpdate === Break ? breakTimeDisplay : sessionDisplay\n    time += timeChange\n\n    if (time >= 1 && time <= 60 && !tickTimer) {\n      switch (modeToUpdate) {\n        case Break:\n          setBreakTimeDisplay(time)\n          break;\n        case Session:\n          setSessionDisplay(time)\n          break;\n        default:\n          setSessionDisplay(time)\n      }\n    }\n  }\n\n\n  const startStop = () => {\n    setTickTimer(!tickTimer)\n    console.log('start stop')\n  }\n\n  return (\n    <div className=\"App\">\n\n      <div className='length-controls'>\n        <div>\n          <div id='break-label'>Break Length</div>\n          <span id='break-decrement' onClick={() => updateDisplayTime(-1, Break)}>\n            <FontAwesomeIcon icon={faArrowDown} />\n          </span>\n          <span id='break-length'>{breakTimeDisplay}</span>\n          <span id='break-increment' onClick={() => updateDisplayTime(1, Break)}>\n            <FontAwesomeIcon icon={faArrowUp} />\n          </span>\n        </div>\n\n        <div>\n          <div id='session-label'>Session Length</div>\n          <span id='session-decrement' onClick={() => updateDisplayTime(-1, Session)}>\n            <FontAwesomeIcon icon={faArrowDown} />\n          </span>\n          <span id='session-length'>{sessionDisplay}</span>\n          <span id='session-increment' onClick={() => updateDisplayTime(1, Session)}>\n            <FontAwesomeIcon icon={faArrowUp} />\n          </span>\n        </div>\n\n      </div>\n\n\n\n      <div className='main-display'>\n        <div id='timer-label'>{mode}</div>\n        <div id='time-left'>{timeDisplay}</div>\n\n        <div className='display-controls'>\n          <span id='start_stop' onClick={startStop}>\n            <FontAwesomeIcon icon={faPlay} />\n            <FontAwesomeIcon icon={faPause} />\n          </span>\n          <span id='reset' onClick={reset}>Reset</span>\n        </div>\n\n      </div>\n\n      <audio id='beep' src='https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav'></audio>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}